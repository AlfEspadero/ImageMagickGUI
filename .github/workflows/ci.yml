name: CI - Test and Lint

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.9, '3.10', 3.11, 3.12]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y imagemagick
        sudo apt-get install -y python3-tk
    
    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install imagemagick
    
    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install imagemagick
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        # Install package in development mode
        pip install -e .
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 main.py --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 main.py --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test import
      run: |
        python -c "import main; print('✅ Main module imports successfully')"
    
    - name: Test package installation
      run: |
        python -c "import pkg_resources; pkg_resources.get_distribution('imagemagick-gui')"
    
    - name: Check ImageMagick availability
      run: |
        python -c "
        import subprocess
        try:
            result = subprocess.run(['magick', '-version'], capture_output=True, text=True, timeout=10)
            if result.returncode == 0:
                print('✅ ImageMagick (magick) found')
            else:
                result = subprocess.run(['convert', '-version'], capture_output=True, text=True, timeout=10)
                if result.returncode == 0:
                    print('✅ ImageMagick (convert) found')
                else:
                    print('⚠️ ImageMagick not found')
        except Exception as e:
            print(f'⚠️ Error checking ImageMagick: {e}')
        "